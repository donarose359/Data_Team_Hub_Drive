// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package test.h_hdo_veh_assets_driver_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: H_HDO_veh_assets_driver Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20190924_1038-M2
 * @status 
 */
public class H_HDO_veh_assets_driver implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "H_HDO_veh_assets_driver";
	private final String projectName = "TEST";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				H_HDO_veh_assets_driver.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(H_HDO_veh_assets_driver.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_1_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSystem_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHttpRequest_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSystem_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_1_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String _index;

				public String get_index () {
					return this._index;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this._index = readString(dis);
					
					this.id = readString(dis);
					
					this.id2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._index,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.id2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_index="+_index);
		sb.append(",id="+id);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public Integer org_id;

				public Integer getOrg_id () {
					return this.org_id;
				}
				
			    public Integer account_id;

				public Integer getAccount_id () {
					return this.account_id;
				}
				
			    public java.util.Date current_date;

				public java.util.Date getCurrent_date () {
					return this.current_date;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String asset_id;

				public String getAsset_id () {
					return this.asset_id;
				}
				
			    public String driver_id;

				public String getDriver_id () {
					return this.driver_id;
				}
				
			    public String eld_driver_id;

				public String getEld_driver_id () {
					return this.eld_driver_id;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String last_name;

				public String getLast_name () {
					return this.last_name;
				}
				
			    public String license_no;

				public String getLicense_no () {
					return this.license_no;
				}
				
			    public String license_state;

				public String getLicense_state () {
					return this.license_state;
				}
				
			    public String phone_no;

				public String getPhone_no () {
					return this.phone_no;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
						this.org_id = readInteger(dis);
					
						this.account_id = readInteger(dis);
					
					this.current_date = readDate(dis);
					
					this.id2 = readString(dis);
					
					this.status = readString(dis);
					
					this.timestamp = readString(dis);
					
					this.message = readString(dis);
					
					this.asset_id = readString(dis);
					
					this.driver_id = readString(dis);
					
					this.eld_driver_id = readString(dis);
					
					this.first_name = readString(dis);
					
					this.last_name = readString(dis);
					
					this.license_no = readString(dis);
					
					this.license_state = readString(dis);
					
					this.phone_no = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// Integer
				
						writeInteger(this.org_id,dos);
					
					// Integer
				
						writeInteger(this.account_id,dos);
					
					// java.util.Date
				
						writeDate(this.current_date,dos);
					
					// String
				
						writeString(this.id2,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.asset_id,dos);
					
					// String
				
						writeString(this.driver_id,dos);
					
					// String
				
						writeString(this.eld_driver_id,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.last_name,dos);
					
					// String
				
						writeString(this.license_no,dos);
					
					// String
				
						writeString(this.license_state,dos);
					
					// String
				
						writeString(this.phone_no,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",org_id="+String.valueOf(org_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",current_date="+String.valueOf(current_date));
		sb.append(",id2="+id2);
		sb.append(",status="+status);
		sb.append(",timestamp="+timestamp);
		sb.append(",message="+message);
		sb.append(",asset_id="+asset_id);
		sb.append(",driver_id="+driver_id);
		sb.append(",eld_driver_id="+eld_driver_id);
		sb.append(",first_name="+first_name);
		sb.append(",last_name="+last_name);
		sb.append(",license_no="+license_no);
		sb.append(",license_state="+license_state);
		sb.append(",phone_no="+phone_no);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String assetId;

				public String getAssetId () {
					return this.assetId;
				}
				
			    public String driver_driverId;

				public String getDriver_driverId () {
					return this.driver_driverId;
				}
				
			    public String driver_eldDriverId;

				public String getDriver_eldDriverId () {
					return this.driver_eldDriverId;
				}
				
			    public String driver_firstName;

				public String getDriver_firstName () {
					return this.driver_firstName;
				}
				
			    public String driver_lastName;

				public String getDriver_lastName () {
					return this.driver_lastName;
				}
				
			    public String driver_licenseNo;

				public String getDriver_licenseNo () {
					return this.driver_licenseNo;
				}
				
			    public String driver_licenseState;

				public String getDriver_licenseState () {
					return this.driver_licenseState;
				}
				
			    public String driver_phoneNo;

				public String getDriver_phoneNo () {
					return this.driver_phoneNo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.status = readString(dis);
					
					this.timestamp = readString(dis);
					
					this.message = readString(dis);
					
					this.assetId = readString(dis);
					
					this.driver_driverId = readString(dis);
					
					this.driver_eldDriverId = readString(dis);
					
					this.driver_firstName = readString(dis);
					
					this.driver_lastName = readString(dis);
					
					this.driver_licenseNo = readString(dis);
					
					this.driver_licenseState = readString(dis);
					
					this.driver_phoneNo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.assetId,dos);
					
					// String
				
						writeString(this.driver_driverId,dos);
					
					// String
				
						writeString(this.driver_eldDriverId,dos);
					
					// String
				
						writeString(this.driver_firstName,dos);
					
					// String
				
						writeString(this.driver_lastName,dos);
					
					// String
				
						writeString(this.driver_licenseNo,dos);
					
					// String
				
						writeString(this.driver_licenseState,dos);
					
					// String
				
						writeString(this.driver_phoneNo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status="+status);
		sb.append(",timestamp="+timestamp);
		sb.append(",message="+message);
		sb.append(",assetId="+assetId);
		sb.append(",driver_driverId="+driver_driverId);
		sb.append(",driver_eldDriverId="+driver_eldDriverId);
		sb.append(",driver_firstName="+driver_firstName);
		sb.append(",driver_lastName="+driver_lastName);
		sb.append(",driver_licenseNo="+driver_licenseNo);
		sb.append(",driver_licenseState="+driver_licenseState);
		sb.append(",driver_phoneNo="+driver_phoneNo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String assetId;

				public String getAssetId () {
					return this.assetId;
				}
				
			    public String driver_driverId;

				public String getDriver_driverId () {
					return this.driver_driverId;
				}
				
			    public String driver_eldDriverId;

				public String getDriver_eldDriverId () {
					return this.driver_eldDriverId;
				}
				
			    public String driver_firstName;

				public String getDriver_firstName () {
					return this.driver_firstName;
				}
				
			    public String driver_lastName;

				public String getDriver_lastName () {
					return this.driver_lastName;
				}
				
			    public String driver_licenseNo;

				public String getDriver_licenseNo () {
					return this.driver_licenseNo;
				}
				
			    public String driver_licenseState;

				public String getDriver_licenseState () {
					return this.driver_licenseState;
				}
				
			    public String driver_phoneNo;

				public String getDriver_phoneNo () {
					return this.driver_phoneNo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.status = readString(dis);
					
					this.timestamp = readString(dis);
					
					this.message = readString(dis);
					
					this.assetId = readString(dis);
					
					this.driver_driverId = readString(dis);
					
					this.driver_eldDriverId = readString(dis);
					
					this.driver_firstName = readString(dis);
					
					this.driver_lastName = readString(dis);
					
					this.driver_licenseNo = readString(dis);
					
					this.driver_licenseState = readString(dis);
					
					this.driver_phoneNo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.assetId,dos);
					
					// String
				
						writeString(this.driver_driverId,dos);
					
					// String
				
						writeString(this.driver_eldDriverId,dos);
					
					// String
				
						writeString(this.driver_firstName,dos);
					
					// String
				
						writeString(this.driver_lastName,dos);
					
					// String
				
						writeString(this.driver_licenseNo,dos);
					
					// String
				
						writeString(this.driver_licenseState,dos);
					
					// String
				
						writeString(this.driver_phoneNo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status="+status);
		sb.append(",timestamp="+timestamp);
		sb.append(",message="+message);
		sb.append(",assetId="+assetId);
		sb.append(",driver_driverId="+driver_driverId);
		sb.append(",driver_eldDriverId="+driver_eldDriverId);
		sb.append(",driver_firstName="+driver_firstName);
		sb.append(",driver_lastName="+driver_lastName);
		sb.append(",driver_licenseNo="+driver_licenseNo);
		sb.append(",driver_licenseState="+driver_licenseState);
		sb.append(",driver_phoneNo="+driver_phoneNo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out4Struct out4 = new out4Struct();
out2Struct out2 = new out2Struct();






	
	/**
	 * [tWriteJSONField_1_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_Out", false);
		start_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tWriteJSONField_1_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_1_Out = 0;
				boolean needRoot_tWriteJSONField_1_Out  = true;
				
				String  strCompCache_tWriteJSONField_1_Out= null;		
				
						        java.util.Queue<row3Struct> listGroupby_tWriteJSONField_1_Out = new java.util.concurrent.ConcurrentLinkedQueue<row3Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_1_Out extends Thread {
						
									    java.util.Queue<row3Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_1_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_1_In", queue);
							globalMap.put("flows_tWriteJSONField_1_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_1_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_1_Out txf_tWriteJSONField_1_Out = new ThreadXMLField_tWriteJSONField_1_Out(listGroupby_tWriteJSONField_1_Out);
					
					txf_tWriteJSONField_1_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_1_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_1_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_1_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_1_Out nestXMLTool_tWriteJSONField_1_Out = new NestXMLTool_tWriteJSONField_1_Out();

out4Struct  rowStructOutput_tWriteJSONField_1_Out = new out4Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_1_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_1_Out = null;
org.dom4j.Document doc_tWriteJSONField_1_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_1_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_1_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_1_Out.setTrimText(false);
format_tWriteJSONField_1_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_1_Out = new int[1];

 



/**
 * [tWriteJSONField_1_Out begin ] stop
 */




	
	/**
	 * [tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_Out", false);
		start_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tWriteJSONField_2_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_2_Out = 0;
				boolean needRoot_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<row4Struct> listGroupby_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<row4Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_2_Out extends Thread {
						
									    java.util.Queue<row4Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							globalMap.put("flows_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_2_Out txf_tWriteJSONField_2_Out = new ThreadXMLField_tWriteJSONField_2_Out(listGroupby_tWriteJSONField_2_Out);
					
					txf_tWriteJSONField_2_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_2_Out nestXMLTool_tWriteJSONField_2_Out = new NestXMLTool_tWriteJSONField_2_Out();

out2Struct  rowStructOutput_tWriteJSONField_2_Out = new out2Struct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_2_Out.setTrimText(false);
format_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_2_Out = new int[1];

 



/**
 * [tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String var1;
	java.util.Date var2;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<copyOfout1Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    copyOfout1Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row1.status = next_tHashInput_3.status;
	row1.timestamp = next_tHashInput_3.timestamp;
	row1.message = next_tHashInput_3.message;
	row1.assetId = next_tHashInput_3.assetId;
	row1.driver_driverId = next_tHashInput_3.driver_driverId;
	row1.driver_eldDriverId = next_tHashInput_3.driver_eldDriverId;
	row1.driver_firstName = next_tHashInput_3.driver_firstName;
	row1.driver_lastName = next_tHashInput_3.driver_lastName;
	row1.driver_licenseNo = next_tHashInput_3.driver_licenseNo;
	row1.driver_licenseState = next_tHashInput_3.driver_licenseState;
	row1.driver_phoneNo = next_tHashInput_3.driver_phoneNo;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.status = row1.status ;
out1_tmp.timestamp = row1.timestamp==null?null : row1.timestamp.replace("-", "/").trim() ;
out1_tmp.message = row1.message ;
out1_tmp.assetId = row1.assetId ;
out1_tmp.driver_driverId = row1.driver_driverId ;
out1_tmp.driver_eldDriverId = row1.driver_eldDriverId ;
out1_tmp.driver_firstName = row1.driver_firstName ;
out1_tmp.driver_lastName = row1.driver_lastName ;
out1_tmp.driver_licenseNo = row1.driver_licenseNo ;
out1_tmp.driver_licenseState = row1.driver_licenseState ;
out1_tmp.driver_phoneNo = row1.driver_phoneNo ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = (Numeric.sequence("sj1",2,1)).toString() ;
Var.var2 = TalendDate.getCurrentDate();// ###############################
        // ###############################
        // # Output tables

out4 = null;
out2 = null;


// # Output table : 'out4'
out4_tmp._index = "eos_hdo_tc_prod_veh_asset_driver_index" ;
out4_tmp.id = Var.var1 ;
out4_tmp.id2 = Var.var1 ;
out4 = out4_tmp;

// # Output table : 'out2'
out2_tmp.id = Var.var1 ;
out2_tmp.org_id = 1835;
out2_tmp.account_id = 1835;
out2_tmp.current_date = Var.var2;
out2_tmp.id2 = Var.var1 ;
out2_tmp.status = out1.status ;
out2_tmp.timestamp = out1.timestamp ;
out2_tmp.message = out1.message ;
out2_tmp.asset_id = out1.assetId ;
out2_tmp.driver_id = out1.driver_driverId ;
out2_tmp.eld_driver_id = out1.driver_eldDriverId ;
out2_tmp.first_name = out1.driver_firstName ;
out2_tmp.last_name = out1.driver_lastName ;
out2_tmp.license_no = out1.driver_licenseNo ;
out2_tmp.license_state = out1.driver_licenseState ;
out2_tmp.phone_no = out1.driver_phoneNo ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tWriteJSONField_1_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					

	if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
		throw txf_tWriteJSONField_1_Out.getLastException();
	}
	nb_line_tWriteJSONField_1_Out++;
	valueMap_tWriteJSONField_1_Out.clear();
	arraysValueMap_tWriteJSONField_1_Out.clear();
	valueMap_tWriteJSONField_1_Out.put("_index",
	(
		out4._index != null?
            out4._index.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("_index",
	(
		out4._index != null?
            out4._index.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("id",
	(
		out4.id != null?
            out4.id.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("id",
	(
		out4.id != null?
            out4.id.toString():null
		));
	valueMap_tWriteJSONField_1_Out.put("id2",
	(
		out4.id2 != null?
            out4.id2.toString():null
		));
	arraysValueMap_tWriteJSONField_1_Out.put("id2",
	(
		out4.id2 != null?
            out4.id2.toString():null
		));
		String strTemp_tWriteJSONField_1_Out = "";		strTemp_tWriteJSONField_1_Out = strTemp_tWriteJSONField_1_Out + valueMap_tWriteJSONField_1_Out.get("id2")
							+ valueMap_tWriteJSONField_1_Out.get("id2").length();
	if(strCompCache_tWriteJSONField_1_Out==null){
		strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
		
            	rowStructOutput_tWriteJSONField_1_Out.id2 = out4.id2;
            	
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_tWriteJSONField_1_Out.equals(strTemp_tWriteJSONField_1_Out)){	  
    		nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
			output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
		    output_tWriteJSONField_1_Out.close();
			
				  		  row3Struct row_tWriteJSONField_1_Out = new row3Struct();
						  
								row_tWriteJSONField_1_Out.id2 = rowStructOutput_tWriteJSONField_1_Out.id2;
								
					     		row_tWriteJSONField_1_Out._index = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
					
		    doc_tWriteJSONField_1_Out.clearContent();
			needRoot_tWriteJSONField_1_Out = true;
			for(int i_tWriteJSONField_1_Out=0;i_tWriteJSONField_1_Out<orders_tWriteJSONField_1_Out.length;i_tWriteJSONField_1_Out++){
				orders_tWriteJSONField_1_Out[i_tWriteJSONField_1_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_1_Out != null && groupbyList_tWriteJSONField_1_Out.size() >= 0){
				groupbyList_tWriteJSONField_1_Out.clear();
			}
			strCompCache_tWriteJSONField_1_Out=strTemp_tWriteJSONField_1_Out;
            	rowStructOutput_tWriteJSONField_1_Out.id2 = out4.id2;
            	
		}
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_1_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_1_Out) {
		needRoot_tWriteJSONField_1_Out=false;
		org.dom4j.Element root_tWriteJSONField_1_Out = doc_tWriteJSONField_1_Out.addElement("index");
		subTreeRootParent_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out;
		org.dom4j.Element root_0_tWriteJSONField_1_Out = root_tWriteJSONField_1_Out.addElement("_index");
		if(
		valueMap_tWriteJSONField_1_Out.get("_index")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(root_0_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("_index"));
		}
		root4Group_tWriteJSONField_1_Out = subTreeRootParent_tWriteJSONField_1_Out;
	}else{
		subTreeRootParent_tWriteJSONField_1_Out=root4Group_tWriteJSONField_1_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_1_Out = org.dom4j.DocumentHelper.createElement("_id");
        if(orders_tWriteJSONField_1_Out[0]==0){
        	orders_tWriteJSONField_1_Out[0] = 1;
        }
        if(1 < orders_tWriteJSONField_1_Out.length){
        		orders_tWriteJSONField_1_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_1_Out.elements().add(orders_tWriteJSONField_1_Out[0]++,loop_tWriteJSONField_1_Out);
		if(
		valueMap_tWriteJSONField_1_Out.get("id")!=null){
			nestXMLTool_tWriteJSONField_1_Out .setText(loop_tWriteJSONField_1_Out,
		valueMap_tWriteJSONField_1_Out.get("id"));
		}

 


	tos_count_tWriteJSONField_1_Out++;

/**
 * [tWriteJSONField_1_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

 



/**
 * [tWriteJSONField_1_Out process_data_end ] stop
 */

} // End of branch "out4"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

	if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_tWriteJSONField_2_Out.getLastException();
	}
	nb_line_tWriteJSONField_2_Out++;
	valueMap_tWriteJSONField_2_Out.clear();
	arraysValueMap_tWriteJSONField_2_Out.clear();
	valueMap_tWriteJSONField_2_Out.put("id",
	(
		out2.id != null?
            out2.id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("id",
	(
		out2.id != null?
            out2.id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("org_id",
	(
		out2.org_id != null?
            out2.org_id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("org_id",
	(
		out2.org_id != null?
            out2.org_id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("account_id",
	(
		out2.account_id != null?
            out2.account_id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("account_id",
	(
		out2.account_id != null?
            out2.account_id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("current_date",
	(
		out2.current_date != null?
            FormatterUtils.format_Date(out2.current_date,"yyyy/MM/dd"):null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("current_date",
	(
		out2.current_date != null?
            FormatterUtils.format_Date(out2.current_date,"yyyy/MM/dd"):null
		));
	valueMap_tWriteJSONField_2_Out.put("id2",
	(
		out2.id2 != null?
            out2.id2.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("id2",
	(
		out2.id2 != null?
            out2.id2.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("status",
	(
		out2.status != null?
            out2.status.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("status",
	(
		out2.status != null?
            out2.status.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("timestamp",
	(
		out2.timestamp != null?
            out2.timestamp.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("timestamp",
	(
		out2.timestamp != null?
            out2.timestamp.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("message",
	(
		out2.message != null?
            out2.message.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("message",
	(
		out2.message != null?
            out2.message.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("asset_id",
	(
		out2.asset_id != null?
            out2.asset_id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("asset_id",
	(
		out2.asset_id != null?
            out2.asset_id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("driver_id",
	(
		out2.driver_id != null?
            out2.driver_id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("driver_id",
	(
		out2.driver_id != null?
            out2.driver_id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("eld_driver_id",
	(
		out2.eld_driver_id != null?
            out2.eld_driver_id.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("eld_driver_id",
	(
		out2.eld_driver_id != null?
            out2.eld_driver_id.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("first_name",
	(
		out2.first_name != null?
            out2.first_name.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("first_name",
	(
		out2.first_name != null?
            out2.first_name.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("last_name",
	(
		out2.last_name != null?
            out2.last_name.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("last_name",
	(
		out2.last_name != null?
            out2.last_name.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("license_no",
	(
		out2.license_no != null?
            out2.license_no.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("license_no",
	(
		out2.license_no != null?
            out2.license_no.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("license_state",
	(
		out2.license_state != null?
            out2.license_state.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("license_state",
	(
		out2.license_state != null?
            out2.license_state.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("phone_no",
	(
		out2.phone_no != null?
            out2.phone_no.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("phone_no",
	(
		out2.phone_no != null?
            out2.phone_no.toString():null
		));
		String strTemp_tWriteJSONField_2_Out = "";		strTemp_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out + valueMap_tWriteJSONField_2_Out.get("id")
							+ valueMap_tWriteJSONField_2_Out.get("id").length();
	if(strCompCache_tWriteJSONField_2_Out==null){
		strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
		
            	rowStructOutput_tWriteJSONField_2_Out.id = out2.id;
            	
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_tWriteJSONField_2_Out.equals(strTemp_tWriteJSONField_2_Out)){	  
    		nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
			output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
		    output_tWriteJSONField_2_Out.close();
			
				  		  row4Struct row_tWriteJSONField_2_Out = new row4Struct();
						  
								row_tWriteJSONField_2_Out.id2 = rowStructOutput_tWriteJSONField_2_Out.id;
								
					     		row_tWriteJSONField_2_Out.id1 = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
					
		    doc_tWriteJSONField_2_Out.clearContent();
			needRoot_tWriteJSONField_2_Out = true;
			for(int i_tWriteJSONField_2_Out=0;i_tWriteJSONField_2_Out<orders_tWriteJSONField_2_Out.length;i_tWriteJSONField_2_Out++){
				orders_tWriteJSONField_2_Out[i_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_2_Out != null && groupbyList_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_tWriteJSONField_2_Out.clear();
			}
			strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
            	rowStructOutput_tWriteJSONField_2_Out.id = out2.id;
            	
		}
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_2_Out) {
		needRoot_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_tWriteJSONField_2_Out = doc_tWriteJSONField_2_Out.addElement("rootTag");
		subTreeRootParent_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out;
		org.dom4j.Element root_0_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("org_id");
		if(
		valueMap_tWriteJSONField_2_Out.get("org_id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_0_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("org_id"));
            root_0_tWriteJSONField_2_Out.addAttribute("type", "number");
		}
		org.dom4j.Element root_1_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("account_id");
		if(
		valueMap_tWriteJSONField_2_Out.get("account_id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_1_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("account_id"));
            root_1_tWriteJSONField_2_Out.addAttribute("type", "number");
		}
		org.dom4j.Element root_2_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("status");
		if(
		valueMap_tWriteJSONField_2_Out.get("status")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_2_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("status"));
		}
		org.dom4j.Element root_3_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("timestamp");
		if(
		valueMap_tWriteJSONField_2_Out.get("timestamp")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_3_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("timestamp"));
		}
		org.dom4j.Element root_4_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("message");
		if(
		valueMap_tWriteJSONField_2_Out.get("message")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_4_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("message"));
		}
		org.dom4j.Element root_5_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("asset_id");
		if(
		valueMap_tWriteJSONField_2_Out.get("asset_id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_5_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("asset_id"));
		}
		org.dom4j.Element root_6_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("driver_id");
		if(
		valueMap_tWriteJSONField_2_Out.get("driver_id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_6_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("driver_id"));
		}
		org.dom4j.Element root_7_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("eld_driver_id");
		if(
		valueMap_tWriteJSONField_2_Out.get("eld_driver_id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_7_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("eld_driver_id"));
		}
		org.dom4j.Element root_8_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("first_name");
		if(
		valueMap_tWriteJSONField_2_Out.get("first_name")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_8_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("first_name"));
		}
		org.dom4j.Element root_9_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("last_name");
		if(
		valueMap_tWriteJSONField_2_Out.get("last_name")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_9_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("last_name"));
		}
		org.dom4j.Element root_10_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("license_no");
		if(
		valueMap_tWriteJSONField_2_Out.get("license_no")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_10_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("license_no"));
		}
		org.dom4j.Element root_11_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("license_state");
		if(
		valueMap_tWriteJSONField_2_Out.get("license_state")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_11_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("license_state"));
		}
		org.dom4j.Element root_12_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("phone_no");
		if(
		valueMap_tWriteJSONField_2_Out.get("phone_no")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_12_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("phone_no"));
		}
		org.dom4j.Element root_13_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out.addElement("current_date");
		if(
		valueMap_tWriteJSONField_2_Out.get("current_date")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(root_13_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("current_date"));
		}
		root4Group_tWriteJSONField_2_Out = subTreeRootParent_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_tWriteJSONField_2_Out=root4Group_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("id");
        if(orders_tWriteJSONField_2_Out[0]==0){
        	orders_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_2_Out.length){
        		orders_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_2_Out.elements().add(orders_tWriteJSONField_2_Out[0]++,loop_tWriteJSONField_2_Out);
		if(
		valueMap_tWriteJSONField_2_Out.get("id")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("id"));
		}

 


	tos_count_tWriteJSONField_2_Out++;

/**
 * [tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

if(nb_line_tWriteJSONField_1_Out > 0){  
    nestXMLTool_tWriteJSONField_1_Out.replaceDefaultNameSpace(doc_tWriteJSONField_1_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_1_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_1_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_1_Out, format_tWriteJSONField_1_Out);
	output_tWriteJSONField_1_Out.write(doc_tWriteJSONField_1_Out);
    output_tWriteJSONField_1_Out.close();
					row3Struct row_tWriteJSONField_1_Out = new row3Struct();
						  
								row_tWriteJSONField_1_Out.id2 = rowStructOutput_tWriteJSONField_1_Out.id2;
								
					     		row_tWriteJSONField_1_Out._index = strWriter_tWriteJSONField_1_Out.toString();
					     		listGroupby_tWriteJSONField_1_Out.add(row_tWriteJSONField_1_Out);
		    		

}
globalMap.put("tWriteJSONField_1_Out_NB_LINE",nb_line_tWriteJSONField_1_Out);
globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	
		txf_tWriteJSONField_1_Out.join();
		if(txf_tWriteJSONField_1_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_1_Out.getCurrentComponent();
			throw txf_tWriteJSONField_1_Out.getLastException();
		}
	
resourceMap.put("finish_tWriteJSONField_1_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_1_Out", true);
end_Hash.put("tWriteJSONField_1_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_1_Out end ] stop
 */




	
	/**
	 * [tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

if(nb_line_tWriteJSONField_2_Out > 0){  
    nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
	output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
    output_tWriteJSONField_2_Out.close();
					row4Struct row_tWriteJSONField_2_Out = new row4Struct();
						  
								row_tWriteJSONField_2_Out.id2 = rowStructOutput_tWriteJSONField_2_Out.id;
								
					     		row_tWriteJSONField_2_Out.id1 = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
		    		

}
globalMap.put("tWriteJSONField_2_Out_NB_LINE",nb_line_tWriteJSONField_2_Out);
globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	
		txf_tWriteJSONField_2_Out.join();
		if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_tWriteJSONField_2_Out.getLastException();
		}
	
resourceMap.put("finish_tWriteJSONField_2_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_2_Out", true);
end_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_2_Out end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_1_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_1_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_1_In");
		if(resourceMap.get("finish_tWriteJSONField_1_Out") == null){
			globalMap.put("tWriteJSONField_1_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_1_Out != null) {
		globalMap.put("tWriteJSONField_1_In_FINISH" + (listGroupby_tWriteJSONField_1_Out==null?"":listGroupby_tWriteJSONField_1_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_1_Out finally ] stop
 */




	
	/**
	 * [tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_2_In");
		if(resourceMap.get("finish_tWriteJSONField_2_Out") == null){
			globalMap.put("tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_2_Out != null) {
		globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_2_Out finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String index;

				public String getIndex () {
					return this.index;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.index = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.index,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("index="+index);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String index;

				public String getIndex () {
					return this.index;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.index = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.index,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("index="+index);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfdataStruct implements routines.system.IPersistableRow<copyOfdataStruct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String index;

				public String getIndex () {
					return this.index;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.index = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.index,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("index="+index);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfdataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _index;

				public String get_index () {
					return this._index;
				}
				
			    public String id1;

				public String getId1 () {
					return this.id1;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id1 == null) ? 0 : this.id1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.id1 == null) {
							if (other.id1 != null)
								return false;
						
						} else if (!this.id1.equals(other.id1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other._index = this._index;
	            other.id1 = this.id1;
	            other.id2 = this.id2;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.id1 = this.id1;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.id1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this._index = readString(dis,ois);
					
						this.id2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this._index, dos, oos);
					
						writeString(this.id2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_index="+_index);
		sb.append(",id1="+id1);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id1, other.id1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String _index;

				public String get_index () {
					return this._index;
				}
				
			    public String id1;

				public String getId1 () {
					return this.id1;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this._index = readString(dis);
					
					this.id1 = readString(dis);
					
					this.id2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._index,dos);
					
					// String
				
						writeString(this.id1,dos);
					
					// String
				
						writeString(this.id2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_index="+_index);
		sb.append(",id1="+id1);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row5Struct row5 = new row5Struct();
copyOfdataStruct copyOfdata = new copyOfdataStruct();
copyOfdataStruct row7 = copyOfdata;
copyOfdataStruct row8 = copyOfdata;







	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("D:/HDO/EDL Elastic Uploads/JSONs/Data/TC_Vehicle_asset_drivers/HDO_vehicle_asset_driver.json")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */" "/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                    java.io.Writer outtFileOutputDelimited_1 = null;
                    filetFileOutputDelimited_1 = new java.io.File(fullName_tFileOutputDelimited_1 + splitedFileNo_tFileOutputDelimited_1 + extension_tFileOutputDelimited_1);

                    if(filetFileOutputDelimited_1.exists()) {
                        filetFileOutputDelimited_1.delete();
                    }
                    outtFileOutputDelimited_1 = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fullName_tFileOutputDelimited_1 + splitedFileNo_tFileOutputDelimited_1 + extension_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tJSONDocOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOutput_1", false);
		start_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJSONDocOutput_1 = 0;
		
	globalMap.remove("tJSONDocOutput_1_CURRENT_NODE");
	globalMap.remove("tJSONDocOutput_1_CURRENT_PATH");
	globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
	java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_1 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
	globalMap.put("keyMap_tJSONDocOutput_1", keyMap_tJSONDocOutput_1);
	de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
	if (tJSONDocOutput_1 != null && globalMap.get("tJSONDocOpen_1_CURRENT_NODE") != null && globalMap.get("entryNode_tJSONDocOutput_1") == null && false == false) {
		try {
			globalMap.put("tJSONDocOutput_1", tJSONDocOutput_1);
			String jsonPath = "$";
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   		}
	   		globalMap.put("tJSONDocOutput_1_CURRENT_PATH", path);
	   		tJSONDocOutput_1.setCurrentPath(path);
			// get the parent object we have to dock on
			com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE");
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_1.getNode(entryNode_tJSONDocOutput_1, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_1 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_1", parentNode_tJSONDocOutput_1);
			globalMap.put("entryNode_tJSONDocOutput_1", entryNode_tJSONDocOutput_1);
			globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		} 
	}
 



/**
 * [tJSONDocOutput_1 begin ] stop
 */



	
	/**
	 * [tJSONDocOpen_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_1", false);
		start_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfdata");
					}
				
		int tos_count_tJSONDocOpen_1 = 0;
		


 



/**
 * [tJSONDocOpen_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfdataStruct copyOfdata_tmp = new copyOfdataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row3Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5._index = next_tHashInput_1._index;
	row5.id1 = next_tHashInput_1.id1;
	row5.id2 = next_tHashInput_1.id2;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row6HashKey.id2 = row5.id2 ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.id2 = '" + row6HashKey.id2 + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfdata = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'copyOfdata'
copyOfdata_tmp.index = row5._index +"\n"+ row6.id1;
copyOfdata = copyOfdata_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfdata"
if(copyOfdata != null) { 



	
	/**
	 * [tJSONDocOpen_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfdata");
					}
					
	globalMap.remove("tJSONDocOpen_1_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument(false); 
		globalMap.put("tJSONDocOpen_1", tJSONDocOpen_1);
		globalMap.put("tJSONDocOpen_1_CURRENT_NODE", tJSONDocOpen_1.getRootNode());
		globalMap.put("tJSONDocOpen_1_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", tJSONDocOpen_1.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_1_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 
     row7 = copyOfdata;


	tos_count_tJSONDocOpen_1++;

/**
 * [tJSONDocOpen_1 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
 
	com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE");
	if (entryNode_tJSONDocOutput_1 != null) {
	if (globalMap.get("entryNode_tJSONDocOutput_1") == null || (globalMap.get("entryNode_tJSONDocOutput_1") != entryNode_tJSONDocOutput_1)) {
		try {
			tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
			globalMap.put("tJSONDocOutput_1", tJSONDocOutput_1);
			// get the parent object we have to dock on
			globalMap.put("entryNode_tJSONDocOutput_1", entryNode_tJSONDocOutput_1);
	   		String jsonPath = "$";
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   		}
	   		globalMap.put("tJSONDocOutput_1_CURRENT_PATH", path);
	   		tJSONDocOutput_1.setCurrentPath(path);
			com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_1.getNode(entryNode_tJSONDocOutput_1, jsonPath, true);
			com.fasterxml.jackson.databind.node.ObjectNode parentNode_tJSONDocOutput_1 = null;
			if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
				parentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
			} else if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is already an ArrayNode at the path: " + jsonPath + ". Got node: " + node);
			} else {
				throw new Exception(path + ": Actually an ObjectNode is expected, but there is " + node + " at the path: " + jsonPath + ". Got node: " + node);
			}
			globalMap.put("parent_node_tJSONDocOutput_1", parentNode_tJSONDocOutput_1);
			globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
    }	
	try { // start block for tJSONDocOutput_1
		// get the parent node
        com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("parent_node_tJSONDocOutput_1");
        com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_1 = null;
		if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
			currentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ObjectNode) node;
		} else {
			throw new Exception(globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + ": Actually as parent an ObjectNode is expected, but there is already an ArrayNode from the component: " + tJSONDocOutput_1 + ". Check the configuration.");
		}
		{
			String fieldName = null;
			if (fieldName == null || fieldName.trim().isEmpty()) {
				fieldName = "index";
			}
			tJSONDocOutput_1.setValue(currentNode_tJSONDocOutput_1, fieldName, row7.index, false);
		}
		globalMap.put("tJSONDocOutput_1.index", row7.index);
		globalMap.put("tJSONDocOutput_1_CURRENT_NODE", currentNode_tJSONDocOutput_1);
		Integer counter = (Integer) globalMap.get("tJSONDocOutput_1_NB_LINE");
		globalMap.put("tJSONDocOutput_1_NB_LINE", counter.intValue() + 1);
	} catch (Exception e) {
		globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
		throw e;
	}
	} else {
		throw new Exception("The referenced current document from component: tJSONDocOpen_1 is null. Please check the job structur!");
	} 
 
     row8 = row7;


	tos_count_tJSONDocOutput_1++;

/**
 * [tJSONDocOutput_1 main ] stop
 */
	
	/**
	 * [tJSONDocOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row8.index != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.index
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                        if(currentRow_tFileOutputDelimited_1 % splitEvery_tFileOutputDelimited_1==0 && currentRow_tFileOutputDelimited_1!=0){
                            splitedFileNo_tFileOutputDelimited_1++;
                            outtFileOutputDelimited_1.close();
                            //close original outputStream

                            filetFileOutputDelimited_1 = new java.io.File(fullName_tFileOutputDelimited_1 + splitedFileNo_tFileOutputDelimited_1 + extension_tFileOutputDelimited_1);

                            if(filetFileOutputDelimited_1.exists()) {
                                filetFileOutputDelimited_1.delete();
                            }
                            outtFileOutputDelimited_1 = new routines.system.BufferedOutput(new java.io.OutputStreamWriter(
                                    new java.io.FileOutputStream(fullName_tFileOutputDelimited_1 + splitedFileNo_tFileOutputDelimited_1 + extension_tFileOutputDelimited_1, false),"ISO-8859-15"));
                            outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());
                        }else{
                            outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());
                        }
                        currentRow_tFileOutputDelimited_1++;






 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tJSONDocOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tJSONDocOpen_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_end ] stop
 */

} // End of branch "copyOfdata"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJSONDocOpen_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfdata");
			  	}
			  	
 

ok_Hash.put("tJSONDocOpen_1", true);
end_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());




/**
 * [tJSONDocOpen_1 end ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	
	globalMap.remove("entryNode_tJSONDocOutput_1");
    globalMap.put("tJSONDocOutput_1_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util.buildSQLInClause(keyMap_tJSONDocOutput_1.keySet(), "='0'"));
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJSONDocOutput_1", true);
end_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());




/**
 * [tJSONDocOutput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tSystem_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJSONDocOpen_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 finally ] stop
 */

	
	/**
	 * [tJSONDocOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOutput_1";

	

 



/**
 * [tJSONDocOutput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tSystem_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSystem_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_1", false);
		start_Hash.put("tSystem_1", System.currentTimeMillis());
		
	
	currentComponent="tSystem_1";

	
		int tos_count_tSystem_1 = 0;
		

Runtime runtime_tSystem_1 = Runtime.getRuntime();

String[] env_tSystem_1= null;
java.util.Map<String,String> envMap_tSystem_1= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_1= new java.util.HashMap();
envMapClone_tSystem_1.putAll(envMap_tSystem_1);

final Process ps_tSystem_1 = runtime_tSystem_1.exec( "curl -XDELETE -u elastic:Acce$$ElastiC7747/ https://search-elk-soqgola6bhb67co64hiqigfsjq.us-east-1.es.amazonaws.com/eos_hdo_tc_prod_veh_asset_driver_index" ,env_tSystem_1);

globalMap.remove("tSystem_1_OUTPUT");
globalMap.remove("tSystem_1_ERROROUTPUT");

Thread normal_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_1.start();

Thread error_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_1.start();
if(ps_tSystem_1.getOutputStream()!=null){
    ps_tSystem_1.getOutputStream().close();
}
ps_tSystem_1.waitFor();
normal_tSystem_1.join(10000);
error_tSystem_1.join(10000);


 



/**
 * [tSystem_1 begin ] stop
 */
	
	/**
	 * [tSystem_1 main ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	


 


	tos_count_tSystem_1++;

/**
 * [tSystem_1 main ] stop
 */
	
	/**
	 * [tSystem_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_end ] stop
 */
	
	/**
	 * [tSystem_1 end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

 

ok_Hash.put("tSystem_1", true);
end_Hash.put("tSystem_1", System.currentTimeMillis());




/**
 * [tSystem_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSystem_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHttpRequest_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_1 finally ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}
	

public void tHttpRequest_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tHttpRequest_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_1", false);
		start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_1";

	
		int tos_count_tHttpRequest_1 = 0;
		

 



/**
 * [tHttpRequest_1 begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	


int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_1 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_1 = new java.net.URL("https://search-elk-soqgola6bhb67co64hiqigfsjq.us-east-1.es.amazonaws.com/_bulk");

  java.net.Authenticator.setDefault(new java.net.Authenticator() {
      protected java.net.PasswordAuthentication getPasswordAuthentication() {

 
	final String decryptedPassword_tHttpRequest_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[32xCY4kyuii7NHj+TIayJmB8nGz+65MQoency4aowH4=]");

        return new java.net.PasswordAuthentication("elastic", decryptedPassword_tHttpRequest_1.toCharArray());
  }});
java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
urlConn_tHttpRequest_1.setRequestMethod("POST");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);

  urlConn_tHttpRequest_1.setRequestProperty("Content-type", "application/json");
boolean connected_tHttpRequest_1 = false;
int responseCode_tHttpRequest_1 = 0;
globalMap.put("tHttpRequest_1_CONNECTED", false);
try{
    urlConn_tHttpRequest_1.connect();
    connected_tHttpRequest_1 = true;
    globalMap.put("tHttpRequest_1_CONNECTED", true);

    byte[] buffer_tHttpRequest_1 = new byte[1024];
    int bos_buffer_tHttpRequest_1 = 0;
            java.io.InputStream bisParam_tHttpRequest_1 = new java.io.BufferedInputStream(new java.io.FileInputStream("D:/HDO/EDL Elastic Uploads/JSONs/First Row Headers/HDO_vehicle_asset_driverFRH.json"));
            java.io.OutputStream bosParam_tHttpRequest_1 = new java.io.BufferedOutputStream(urlConn_tHttpRequest_1.getOutputStream());

            while ((bos_buffer_tHttpRequest_1 = bisParam_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {
                bosParam_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1);
            }
            bosParam_tHttpRequest_1.flush();
            bosParam_tHttpRequest_1.close();
            bisParam_tHttpRequest_1.close();

    responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
    globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

    if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
        java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
                java.io.File bosParent_tHttpRequest_1 = new java.io.File("D:/HDO/EDL Elastic Uploads/JSONs/First Row Headers/HDO_vehicle_asset_driver_first_row_error.json").getParentFile();
                if (bosParent_tHttpRequest_1 != null && bosParent_tHttpRequest_1.exists() == false){
                    bosParent_tHttpRequest_1.mkdirs();
                }
            java.io.OutputStream bosContent_tHttpRequest_1 = new java.io.BufferedOutputStream(new java.io.FileOutputStream("D:/HDO/EDL Elastic Uploads/JSONs/First Row Headers/HDO_vehicle_asset_driver_first_row_error.json"));
        while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {bosContent_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1); 
        }
            bosContent_tHttpRequest_1.flush();
            bosContent_tHttpRequest_1.close();
        bis_tHttpRequest_1.close();
    } else {
    	String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1.getErrorStream();
        if(err_stream_tHttpRequest_1!=null) {
            java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(err_stream_tHttpRequest_1);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_1 = new byte[1024];
            int read_tHttpRequest_1 = -1;
        	try {
            	while ((read_tHttpRequest_1 = es_tHttpRequest_1.read(buf_tHttpRequest_1)) > 0) {
            		baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
            	}
        	} finally {
        		es_tHttpRequest_1.close();
        	}
        
        	responseMessage_tHttpRequest_1 += ("\n" + new String(baos_tHttpRequest_1.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
    }

    urlConn_tHttpRequest_1.disconnect();
}catch(Exception e){
        throw e;
}

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_1 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());




/**
 * [tHttpRequest_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHttpRequest_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHttpRequest_1 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_1 = 0; //for statistics
						
			int NB_ITERATE_tHttpRequest_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = "D:/HDO/EDL Elastic Uploads/JSONs/Data/TC_vehicle_asset_drivers";
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("HDO_vehicle_asset_driver*.json");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tHttpRequest_2++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tHttpRequest_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tHttpRequest_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_2", false);
		start_Hash.put("tHttpRequest_2", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_2";

	
		int tos_count_tHttpRequest_2 = 0;
		

 



/**
 * [tHttpRequest_2 begin ] stop
 */
	
	/**
	 * [tHttpRequest_2 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	


int connectTimeOut_tHttpRequest_2 = Integer.valueOf(30)*1000;
int readTimeOut_tHttpRequest_2 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_2 = new java.net.URL("https://search-elk-soqgola6bhb67co64hiqigfsjq.us-east-1.es.amazonaws.com/_bulk");

  java.net.Authenticator.setDefault(new java.net.Authenticator() {
      protected java.net.PasswordAuthentication getPasswordAuthentication() {

 
	final String decryptedPassword_tHttpRequest_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[32xCY4kyuii7NHj+TIayJmB8nGz+65MQoency4aowH4=]");

        return new java.net.PasswordAuthentication("elastic", decryptedPassword_tHttpRequest_2.toCharArray());
  }});
java.net.HttpURLConnection urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2.openConnection();
urlConn_tHttpRequest_2.setRequestMethod("POST");
urlConn_tHttpRequest_2.setDoOutput(true);
urlConn_tHttpRequest_2.setDoInput(true);
urlConn_tHttpRequest_2.setUseCaches(false);

  urlConn_tHttpRequest_2.setRequestProperty("Content-type", "application/json");
boolean connected_tHttpRequest_2 = false;
int responseCode_tHttpRequest_2 = 0;
globalMap.put("tHttpRequest_2_CONNECTED", false);
try{
    urlConn_tHttpRequest_2.connect();
    connected_tHttpRequest_2 = true;
    globalMap.put("tHttpRequest_2_CONNECTED", true);

    byte[] buffer_tHttpRequest_2 = new byte[1024];
    int bos_buffer_tHttpRequest_2 = 0;
            java.io.InputStream bisParam_tHttpRequest_2 = new java.io.BufferedInputStream(new java.io.FileInputStream(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH"))));
            java.io.OutputStream bosParam_tHttpRequest_2 = new java.io.BufferedOutputStream(urlConn_tHttpRequest_2.getOutputStream());

            while ((bos_buffer_tHttpRequest_2 = bisParam_tHttpRequest_2.read(buffer_tHttpRequest_2)) != -1) {
                bosParam_tHttpRequest_2.write(buffer_tHttpRequest_2,0,bos_buffer_tHttpRequest_2);
            }
            bosParam_tHttpRequest_2.flush();
            bosParam_tHttpRequest_2.close();
            bisParam_tHttpRequest_2.close();

    responseCode_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseCode();
    globalMap.put("tHttpRequest_2_RESPONSE_CODE", responseCode_tHttpRequest_2);

    if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_2) {
        java.io.InputStream bis_tHttpRequest_2 = new java.io.BufferedInputStream(urlConn_tHttpRequest_2.getInputStream());
                java.io.File bosParent_tHttpRequest_2 = new java.io.File("D:/HDO/EDL Elastic Uploads/JSONs/Data/TC_Vehicle_asset_drivers/Error/HDO_tc_veh_asset_Error"+Numeric.sequence("z1",0,1)+".json").getParentFile();
                if (bosParent_tHttpRequest_2 != null && bosParent_tHttpRequest_2.exists() == false){
                    bosParent_tHttpRequest_2.mkdirs();
                }
            java.io.OutputStream bosContent_tHttpRequest_2 = new java.io.BufferedOutputStream(new java.io.FileOutputStream("D:/HDO/EDL Elastic Uploads/JSONs/Data/TC_Vehicle_asset_drivers/Error/HDO_tc_veh_asset_Error"+Numeric.sequence("z1",0,1)+".json"));
        while ((bos_buffer_tHttpRequest_2 = bis_tHttpRequest_2.read(buffer_tHttpRequest_2)) != -1) {bosContent_tHttpRequest_2.write(buffer_tHttpRequest_2,0,bos_buffer_tHttpRequest_2); 
        }
            bosContent_tHttpRequest_2.flush();
            bosContent_tHttpRequest_2.close();
        bis_tHttpRequest_2.close();
    } else {
    	String responseMessage_tHttpRequest_2 = urlConn_tHttpRequest_2.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_2 = urlConn_tHttpRequest_2.getErrorStream();
        if(err_stream_tHttpRequest_2!=null) {
            java.io.InputStream es_tHttpRequest_2 = new java.io.BufferedInputStream(err_stream_tHttpRequest_2);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_2 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_2 = new byte[1024];
            int read_tHttpRequest_2 = -1;
        	try {
            	while ((read_tHttpRequest_2 = es_tHttpRequest_2.read(buf_tHttpRequest_2)) > 0) {
            		baos_tHttpRequest_2.write(buf_tHttpRequest_2, 0, read_tHttpRequest_2);
            	}
        	} finally {
        		es_tHttpRequest_2.close();
        	}
        
        	responseMessage_tHttpRequest_2 += ("\n" + new String(baos_tHttpRequest_2.toByteArray()));
        }
    	
            throw new RuntimeException("Request failed:" + responseCode_tHttpRequest_2 + " " + responseMessage_tHttpRequest_2);
    }

    urlConn_tHttpRequest_2.disconnect();
}catch(Exception e){
        throw e;
}

 


	tos_count_tHttpRequest_2++;

/**
 * [tHttpRequest_2 main ] stop
 */
	
	/**
	 * [tHttpRequest_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 process_data_begin ] stop
 */
	
	/**
	 * [tHttpRequest_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_2 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 

ok_Hash.put("tHttpRequest_2", true);
end_Hash.put("tHttpRequest_2", System.currentTimeMillis());




/**
 * [tHttpRequest_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tHttpRequest_2);
						}				
					




	NB_ITERATE_tFileDelete_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileDelete_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileDelete_1);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tSystem_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tHttpRequest_2 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_2";

	

 



/**
 * [tHttpRequest_2 finally ] stop
 */




	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tSystem_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSystem_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_2", false);
		start_Hash.put("tSystem_2", System.currentTimeMillis());
		
	
	currentComponent="tSystem_2";

	
		int tos_count_tSystem_2 = 0;
		

Runtime runtime_tSystem_2 = Runtime.getRuntime();

String[] env_tSystem_2= null;
java.util.Map<String,String> envMap_tSystem_2= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_2= new java.util.HashMap();
envMapClone_tSystem_2.putAll(envMap_tSystem_2);

final Process ps_tSystem_2 = runtime_tSystem_2.exec( "curl -XDELETE -u elastic:Acce$$ElastiC7747/ https://search-elk-soqgola6bhb67co64hiqigfsjq.us-east-1.es.amazonaws.com/eos_hdo_tc_prod_veh_asset_driver_index/_doc/1?pretty" ,env_tSystem_2);

globalMap.remove("tSystem_2_OUTPUT");
globalMap.remove("tSystem_2_ERROROUTPUT");

Thread normal_tSystem_2 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_2.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_2.start();

Thread error_tSystem_2 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_2.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_2.start();
if(ps_tSystem_2.getOutputStream()!=null){
    ps_tSystem_2.getOutputStream().close();
}
ps_tSystem_2.waitFor();
normal_tSystem_2.join(10000);
error_tSystem_2.join(10000);


 



/**
 * [tSystem_2 begin ] stop
 */
	
	/**
	 * [tSystem_2 main ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	


 


	tos_count_tSystem_2++;

/**
 * [tSystem_2 main ] stop
 */
	
	/**
	 * [tSystem_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 process_data_end ] stop
 */
	
	/**
	 * [tSystem_2 end ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

globalMap.put("tSystem_2_EXIT_VALUE", ps_tSystem_2.exitValue());

 

ok_Hash.put("tSystem_2", true);
end_Hash.put("tSystem_2", System.currentTimeMillis());




/**
 * [tSystem_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSystem_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileDelete_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_2 finally ] start
	 */

	

	
	
	currentComponent="tSystem_2";

	

 



/**
 * [tSystem_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(((String)globalMap.get("tFileList_3_CURRENT_FILEPATH")));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",((String)globalMap.get("tFileList_3_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id1;

				public String getId1 () {
					return this.id1;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id2 == null) ? 0 : this.id2.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.id2 == null) {
							if (other.id2 != null)
								return false;
						
						} else if (!this.id2.equals(other.id2))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.id1 = this.id1;
	            other.id2 = this.id2;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.id2 = this.id2;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.id2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id1 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.id1, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id1="+id1);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id2, other.id2);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_2 - inputs:(after_tHashInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(row5,row6) outputs:(copyOfdata)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row4Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row6.id1 = next_tHashInput_2.id1;
	row6.id2 = next_tHashInput_2.id2;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.id1 = row6.id1;
				
				row6_HashRow.id2 = row6.id2;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_H_HDO_veh_assets_driver_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
	
 
     
    
  String directory_tFileList_3 = "D:/HDO/EDL Elastic Uploads/Input";
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("*veh_asset_driver*.xlsx");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = false;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
     
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	
	/**
	 * [tFileList_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileList_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_end ] stop
 */
	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

    if (NB_FILEtFileList_3 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_3);
  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileInputExcel_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String assetId;

				public String getAssetId () {
					return this.assetId;
				}
				
			    public String driver_driverId;

				public String getDriver_driverId () {
					return this.driver_driverId;
				}
				
			    public String driver_eldDriverId;

				public String getDriver_eldDriverId () {
					return this.driver_eldDriverId;
				}
				
			    public String driver_firstName;

				public String getDriver_firstName () {
					return this.driver_firstName;
				}
				
			    public String driver_lastName;

				public String getDriver_lastName () {
					return this.driver_lastName;
				}
				
			    public String driver_licenseNo;

				public String getDriver_licenseNo () {
					return this.driver_licenseNo;
				}
				
			    public String driver_licenseState;

				public String getDriver_licenseState () {
					return this.driver_licenseState;
				}
				
			    public String driver_phoneNo;

				public String getDriver_phoneNo () {
					return this.driver_phoneNo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.status = readString(dis);
					
					this.timestamp = readString(dis);
					
					this.message = readString(dis);
					
					this.assetId = readString(dis);
					
					this.driver_driverId = readString(dis);
					
					this.driver_eldDriverId = readString(dis);
					
					this.driver_firstName = readString(dis);
					
					this.driver_lastName = readString(dis);
					
					this.driver_licenseNo = readString(dis);
					
					this.driver_licenseState = readString(dis);
					
					this.driver_phoneNo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.assetId,dos);
					
					// String
				
						writeString(this.driver_driverId,dos);
					
					// String
				
						writeString(this.driver_eldDriverId,dos);
					
					// String
				
						writeString(this.driver_firstName,dos);
					
					// String
				
						writeString(this.driver_lastName,dos);
					
					// String
				
						writeString(this.driver_licenseNo,dos);
					
					// String
				
						writeString(this.driver_licenseState,dos);
					
					// String
				
						writeString(this.driver_phoneNo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status="+status);
		sb.append(",timestamp="+timestamp);
		sb.append(",message="+message);
		sb.append(",assetId="+assetId);
		sb.append(",driver_driverId="+driver_driverId);
		sb.append(",driver_eldDriverId="+driver_eldDriverId);
		sb.append(",driver_firstName="+driver_firstName);
		sb.append(",driver_lastName="+driver_lastName);
		sb.append(",driver_licenseNo="+driver_licenseNo);
		sb.append(",driver_licenseState="+driver_licenseState);
		sb.append(",driver_phoneNo="+driver_phoneNo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public String assetId;

				public String getAssetId () {
					return this.assetId;
				}
				
			    public String driver_driverId;

				public String getDriver_driverId () {
					return this.driver_driverId;
				}
				
			    public String driver_eldDriverId;

				public String getDriver_eldDriverId () {
					return this.driver_eldDriverId;
				}
				
			    public String driver_firstName;

				public String getDriver_firstName () {
					return this.driver_firstName;
				}
				
			    public String driver_lastName;

				public String getDriver_lastName () {
					return this.driver_lastName;
				}
				
			    public String driver_licenseNo;

				public String getDriver_licenseNo () {
					return this.driver_licenseNo;
				}
				
			    public String driver_licenseState;

				public String getDriver_licenseState () {
					return this.driver_licenseState;
				}
				
			    public String driver_phoneNo;

				public String getDriver_phoneNo () {
					return this.driver_phoneNo;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.status = readString(dis);
					
					this.timestamp = readString(dis);
					
					this.message = readString(dis);
					
					this.assetId = readString(dis);
					
					this.driver_driverId = readString(dis);
					
					this.driver_eldDriverId = readString(dis);
					
					this.driver_firstName = readString(dis);
					
					this.driver_lastName = readString(dis);
					
					this.driver_licenseNo = readString(dis);
					
					this.driver_licenseState = readString(dis);
					
					this.driver_phoneNo = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// String
				
						writeString(this.assetId,dos);
					
					// String
				
						writeString(this.driver_driverId,dos);
					
					// String
				
						writeString(this.driver_eldDriverId,dos);
					
					// String
				
						writeString(this.driver_firstName,dos);
					
					// String
				
						writeString(this.driver_lastName,dos);
					
					// String
				
						writeString(this.driver_licenseNo,dos);
					
					// String
				
						writeString(this.driver_licenseState,dos);
					
					// String
				
						writeString(this.driver_phoneNo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status="+status);
		sb.append(",timestamp="+timestamp);
		sb.append(",message="+message);
		sb.append(",assetId="+assetId);
		sb.append(",driver_driverId="+driver_driverId);
		sb.append(",driver_eldDriverId="+driver_eldDriverId);
		sb.append(",driver_firstName="+driver_firstName);
		sb.append(",driver_lastName="+driver_lastName);
		sb.append(",driver_licenseNo="+driver_licenseNo);
		sb.append(",driver_licenseState="+driver_licenseState);
		sb.append(",driver_phoneNo="+driver_phoneNo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();





	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_H_HDO_veh_assets_driver_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<copyOfout1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;
 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = ((String)globalMap.get("tFileList_3_CURRENT_FILEPATH"));
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2){
   			sheetList_tFileInputExcel_2.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
    	}
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row2 = null;
					int tempRowLength_tFileInputExcel_2 = 11;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row2 = new row2Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "status";

				row2.status = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.status = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "timestamp";

				row2.timestamp = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.timestamp = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "message";

				row2.message = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.message = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "assetId";

				row2.assetId = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.assetId = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_driverId";

				row2.driver_driverId = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_driverId = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_eldDriverId";

				row2.driver_eldDriverId = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_eldDriverId = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_firstName";

				row2.driver_firstName = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_firstName = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_lastName";

				row2.driver_lastName = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_lastName = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_licenseNo";

				row2.driver_licenseNo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_licenseNo = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_licenseState";

				row2.driver_licenseState = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_licenseState = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "driver_phoneNo";

				row2.driver_phoneNo = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row2.driver_phoneNo = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
	            throw(e);
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.status = row2.status ;
copyOfout1_tmp.timestamp = row2.timestamp==null?null : row2.timestamp.replace("-", "/").trim() ;
copyOfout1_tmp.message = row2.message ;
copyOfout1_tmp.assetId = row2.assetId ;
copyOfout1_tmp.driver_driverId = row2.driver_driverId ;
copyOfout1_tmp.driver_eldDriverId = row2.driver_eldDriverId ;
copyOfout1_tmp.driver_firstName = row2.driver_firstName ;
copyOfout1_tmp.driver_lastName = row2.driver_lastName ;
copyOfout1_tmp.driver_licenseNo = row2.driver_licenseNo ;
copyOfout1_tmp.driver_licenseState = row2.driver_licenseState ;
copyOfout1_tmp.driver_phoneNo = row2.driver_phoneNo ;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1");
					}
					



    
		copyOfout1Struct oneRow_tHashOutput_3 = new copyOfout1Struct();
				
					oneRow_tHashOutput_3.status = copyOfout1.status;
					oneRow_tHashOutput_3.timestamp = copyOfout1.timestamp;
					oneRow_tHashOutput_3.message = copyOfout1.message;
					oneRow_tHashOutput_3.assetId = copyOfout1.assetId;
					oneRow_tHashOutput_3.driver_driverId = copyOfout1.driver_driverId;
					oneRow_tHashOutput_3.driver_eldDriverId = copyOfout1.driver_eldDriverId;
					oneRow_tHashOutput_3.driver_firstName = copyOfout1.driver_firstName;
					oneRow_tHashOutput_3.driver_lastName = copyOfout1.driver_lastName;
					oneRow_tHashOutput_3.driver_licenseNo = copyOfout1.driver_licenseNo;
					oneRow_tHashOutput_3.driver_licenseState = copyOfout1.driver_licenseState;
					oneRow_tHashOutput_3.driver_phoneNo = copyOfout1.driver_phoneNo;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;
 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String _index;

				public String get_index () {
					return this._index;
				}
				
			    public String id1;

				public String getId1 () {
					return this.id1;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this._index = readString(dis);
					
					this.id1 = readString(dis);
					
					this.id2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._index,dos);
					
					// String
				
						writeString(this.id1,dos);
					
					// String
				
						writeString(this.id2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_index="+_index);
		sb.append(",id1="+id1);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_1_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_H_HDO_veh_assets_driver_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_1_In", false);
		start_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	
		int tos_count_tWriteJSONField_1_In = 0;
		

				int nb_line_tWriteJSONField_1_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_1_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_1_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_1_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_1_In.setForceTopLevelObject(true);
				xmlSerializer_tWriteJSONField_1_In.setUseEmptyStrings(false);
				
					   java.util.Queue<row3Struct> queue_tWriteJSONField_1_In = (java.util.Queue<row3Struct>) globalMap.get("queue_tWriteJSONField_1_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
				String str_tWriteJSONField_1_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_1_In) || !queue_tWriteJSONField_1_In.isEmpty()) {
					if (!queue_tWriteJSONField_1_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_1_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

                    row3Struct result_tWriteJSONField_1_In = queue_tWriteJSONField_1_In.poll();
                    str_tWriteJSONField_1_In = result_tWriteJSONField_1_In._index;
                                row3.id2 = result_tWriteJSONField_1_In.id2;
        //Convert XML to JSON
        net.sf.json.JSON json_tWriteJSONField_1_In = xmlSerializer_tWriteJSONField_1_In.read(str_tWriteJSONField_1_In);
        row3._index = json_tWriteJSONField_1_In.toString();
    
        nb_line_tWriteJSONField_1_In++;

 


	tos_count_tWriteJSONField_1_In++;

/**
 * [tWriteJSONField_1_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					



    
		row3Struct oneRow_tHashOutput_1 = new row3Struct();
				
					oneRow_tHashOutput_1._index = row3._index;
					oneRow_tHashOutput_1.id1 = row3.id1;
					oneRow_tHashOutput_1.id2 = row3.id2;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In = "tWriteJSONField_1_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_1_In==null?"":queue_tWriteJSONField_1_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_1_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_1_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_1_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_1_In);
			
globalMap.put("tWriteJSONField_1_NB_LINE",nb_line_tWriteJSONField_1_In);
 

ok_Hash.put("tWriteJSONField_1_In", true);
end_Hash.put("tWriteJSONField_1_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_1_In end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_1";
	
	currentComponent="tWriteJSONField_1_In";

	

 



/**
 * [tWriteJSONField_1_In finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_1_In_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_TEST_H_HDO_veh_assets_driver = new byte[0];
    static byte[] commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[0];

	
			    public String id1;

				public String getId1 () {
					return this.id1;
				}
				
			    public String id2;

				public String getId2 () {
					return this.id2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TEST_H_HDO_veh_assets_driver.length) {
				if(length < 1024 && commonByteArray_TEST_H_HDO_veh_assets_driver.length == 0) {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[1024];
				} else {
   					commonByteArray_TEST_H_HDO_veh_assets_driver = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length);
			strReturn = new String(commonByteArray_TEST_H_HDO_veh_assets_driver, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TEST_H_HDO_veh_assets_driver) {

        	try {

        		int length = 0;
		
					this.id1 = readString(dis);
					
					this.id2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id1,dos);
					
					// String
				
						writeString(this.id2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id1="+id1);
		sb.append(",id2="+id2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_H_HDO_veh_assets_driver_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_In", false);
		start_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	
		int tos_count_tWriteJSONField_2_In = 0;
		

				int nb_line_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_2_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_2_In.setUseEmptyStrings(false);
				
					   java.util.Queue<row4Struct> queue_tWriteJSONField_2_In = (java.util.Queue<row4Struct>) globalMap.get("queue_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
				String str_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_2_In) || !queue_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

                    row4Struct result_tWriteJSONField_2_In = queue_tWriteJSONField_2_In.poll();
                    str_tWriteJSONField_2_In = result_tWriteJSONField_2_In.id1;
                                row4.id2 = result_tWriteJSONField_2_In.id2;
        //Convert XML to JSON
        net.sf.json.JSON json_tWriteJSONField_2_In = xmlSerializer_tWriteJSONField_2_In.read(str_tWriteJSONField_2_In);
        row4.id1 = json_tWriteJSONField_2_In.toString();
    
        nb_line_tWriteJSONField_2_In++;

 


	tos_count_tWriteJSONField_2_In++;

/**
 * [tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					



    
		row4Struct oneRow_tHashOutput_2 = new row4Struct();
				
					oneRow_tHashOutput_2.id1 = row4.id1;
					oneRow_tHashOutput_2.id2 = row4.id2;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_2_In);
			
globalMap.put("tWriteJSONField_2_NB_LINE",nb_line_tWriteJSONField_2_In);
 

ok_Hash.put("tWriteJSONField_2_In", true);
end_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final H_HDO_veh_assets_driver H_HDO_veh_assets_driverClass = new H_HDO_veh_assets_driver();

        int exitCode = H_HDO_veh_assets_driverClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = H_HDO_veh_assets_driver.class.getClassLoader().getResourceAsStream("test/h_hdo_veh_assets_driver_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = H_HDO_veh_assets_driver.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_3) {
globalMap.put("tFileList_3_SUBPROCESS_STATE", -1);

e_tFileList_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : H_HDO_veh_assets_driver");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     275685 characters generated by Talend Open Studio for Data Integration 
 *     on the August 8, 2024 1:11:08 PM IST
 ************************************************************************************************/