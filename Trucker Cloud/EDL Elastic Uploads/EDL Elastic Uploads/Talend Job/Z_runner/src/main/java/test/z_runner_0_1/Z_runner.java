// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package test.z_runner_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Z_runner Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20190924_1038-M2
 * @status 
 */
public class Z_runner implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Z_runner";
	private final String projectName = "TEST";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Z_runner.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Z_runner.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	

 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_1.add("java");
		      		
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/ant-1.10.1.jar;../lib/btf-1.2.jar;../lib/checkArchive-1.1-20190917.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-compress-1.19.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/talendzip.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;../lib/zip4j-1.3.3.jar;a_hdo_drivers_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "test.a_hdo_drivers_0_1.A_HDO_Drivers");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
		      		
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/ant-1.10.1.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/checkArchive-1.1-20190917.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-compress-1.19.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/talendzip.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/../lib/zip4j-1.3.3.jar:$ROOT_PATH/a_hdo_drivers_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "test.a_hdo_drivers_0_1.A_HDO_Drivers");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;

		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join(10000);
            error_tRunJob_1.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
class DealChildJobLibrary_tRunJob_2 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

	class JVMArgumentHelper_tRunJob_2 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();
	

 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_2 = System.getProperty("os.name");
			if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_2.add("java");
		      		
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;b_hdo_carriers_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "test.b_hdo_carriers_0_1.B_HDO_Carriers");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_2.add("java");
		      		
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/b_hdo_carriers_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "test.b_hdo_carriers_0_1.B_HDO_Carriers");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_2.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
	
				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

		Runtime runtime_tRunJob_2 = Runtime.getRuntime();
		Process ps_tRunJob_2 = null;

		//0 indicates normal termination
        int result_tRunJob_2;
        StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
        try {
            ps_tRunJob_2 = runtime_tRunJob_2.exec((String[])paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

            Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
            normal_tRunJob_2.start();

            Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
            error_tRunJob_2.start();

            result_tRunJob_2 = ps_tRunJob_2.waitFor();
            normal_tRunJob_2.join(10000);
            error_tRunJob_2.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_2.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_2_CHILD_RETURN_CODE",result_tRunJob_2);
		if(result_tRunJob_2 != 0){
   			globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_2.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_2 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());
			
  		}

		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRunJob_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
class DealChildJobLibrary_tRunJob_3 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_3 dealChildJobLibrary_tRunJob_3 = new DealChildJobLibrary_tRunJob_3();

	class JVMArgumentHelper_tRunJob_3 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_3 jvm_argument_helper_tRunJob_3 = new JVMArgumentHelper_tRunJob_3();
	

 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_3 = System.getProperty("os.name");
			if (osName_tRunJob_3 != null && osName_tRunJob_3.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_3.add("java");
		      		
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;c_hdo_asset_travel_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "test.c_hdo_asset_travel_0_1.C_HDO_asset_travel");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_3.add("java");
		      		
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/c_hdo_asset_travel_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "test.c_hdo_asset_travel_0_1.C_HDO_asset_travel");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_3.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_3 = null;

	
	
				class ConsoleHelper_tRunJob_3 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_3 consoleHelper_tRunJob_3 = new ConsoleHelper_tRunJob_3();

		Runtime runtime_tRunJob_3 = Runtime.getRuntime();
		Process ps_tRunJob_3 = null;

		//0 indicates normal termination
        int result_tRunJob_3;
        StringBuffer errorMsg_tRunJob_3 = new StringBuffer();
        try {
            ps_tRunJob_3 = runtime_tRunJob_3.exec((String[])paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

            Thread normal_tRunJob_3 = consoleHelper_tRunJob_3.getNormalThread(ps_tRunJob_3);
            normal_tRunJob_3.start();

            Thread error_tRunJob_3 = consoleHelper_tRunJob_3.getErrorThread(ps_tRunJob_3, errorMsg_tRunJob_3);
            error_tRunJob_3.start();

            result_tRunJob_3 = ps_tRunJob_3.waitFor();
            normal_tRunJob_3.join(10000);
            error_tRunJob_3.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_3.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_3_CHILD_RETURN_CODE",result_tRunJob_3);
		if(result_tRunJob_3 != 0){
   			globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_3.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_3 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_3.toString());
			
  		}

		

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRunJob_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
class DealChildJobLibrary_tRunJob_4 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_4 dealChildJobLibrary_tRunJob_4 = new DealChildJobLibrary_tRunJob_4();

	class JVMArgumentHelper_tRunJob_4 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_4 jvm_argument_helper_tRunJob_4 = new JVMArgumentHelper_tRunJob_4();
	

 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_4 = System.getProperty("os.name");
			if (osName_tRunJob_4 != null && osName_tRunJob_4.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_4.add("java");
		      		
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, dealChildJobLibrary_tRunJob_4.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;d_hdo_elds_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "test.d_hdo_elds_0_1.D_HDO_elds");
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_node=tRunJob_4");
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_4.add("java");
		      		
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-cp");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, dealChildJobLibrary_tRunJob_4.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/d_hdo_elds_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "test.d_hdo_elds_0_1.D_HDO_elds");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_node=tRunJob_4");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_4.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_4 = null;

	
	
				class ConsoleHelper_tRunJob_4 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_4 consoleHelper_tRunJob_4 = new ConsoleHelper_tRunJob_4();

		Runtime runtime_tRunJob_4 = Runtime.getRuntime();
		Process ps_tRunJob_4 = null;

		//0 indicates normal termination
        int result_tRunJob_4;
        StringBuffer errorMsg_tRunJob_4 = new StringBuffer();
        try {
            ps_tRunJob_4 = runtime_tRunJob_4.exec((String[])paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));

            Thread normal_tRunJob_4 = consoleHelper_tRunJob_4.getNormalThread(ps_tRunJob_4);
            normal_tRunJob_4.start();

            Thread error_tRunJob_4 = consoleHelper_tRunJob_4.getErrorThread(ps_tRunJob_4, errorMsg_tRunJob_4);
            error_tRunJob_4.start();

            result_tRunJob_4 = ps_tRunJob_4.waitFor();
            normal_tRunJob_4.join(10000);
            error_tRunJob_4.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_4.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_4_CHILD_RETURN_CODE",result_tRunJob_4);
		if(result_tRunJob_4 != 0){
   			globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_4.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_4 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_4.toString());
			
  		}

		

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRunJob_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_5.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_5 = null;

	
	
		test.e_risk_score_asset_level_0_1.E_risk_score_asset_level childJob_tRunJob_5 = new test.e_risk_score_asset_level_0_1.E_risk_score_asset_level();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				errorCode = childJob_tRunJob_5.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
					java.lang.Exception ce_tRunJob_5 = childJob_tRunJob_5.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_5!=null) ? (ce_tRunJob_5.getClass().getName() + ": " + ce_tRunJob_5.getMessage()) : ""));
				}
			
	  	

 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRunJob_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		
class DealChildJobLibrary_tRunJob_6 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_6 dealChildJobLibrary_tRunJob_6 = new DealChildJobLibrary_tRunJob_6();

	class JVMArgumentHelper_tRunJob_6 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_6 jvm_argument_helper_tRunJob_6 = new JVMArgumentHelper_tRunJob_6();
	

 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_6 = System.getProperty("os.name");
			if (osName_tRunJob_6 != null && osName_tRunJob_6.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_6.add("java");
		      		
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, dealChildJobLibrary_tRunJob_6.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-lang3-3.8.1.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendExcel-1.5-20190731.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;f_hdo_risk_score_carrier_level_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "test.f_hdo_risk_score_carrier_level_0_1.F_HDO_risk_score_carrier_level");
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_node=tRunJob_6");
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_6.add("java");
		      		
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-cp");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, dealChildJobLibrary_tRunJob_6.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-lang3-3.8.1.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendExcel-1.5-20190731.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/f_hdo_risk_score_carrier_level_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "test.f_hdo_risk_score_carrier_level_0_1.F_HDO_risk_score_carrier_level");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_node=tRunJob_6");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_6.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_6 = null;

	
	
				class ConsoleHelper_tRunJob_6 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_6 consoleHelper_tRunJob_6 = new ConsoleHelper_tRunJob_6();

		Runtime runtime_tRunJob_6 = Runtime.getRuntime();
		Process ps_tRunJob_6 = null;

		//0 indicates normal termination
        int result_tRunJob_6;
        StringBuffer errorMsg_tRunJob_6 = new StringBuffer();
        try {
            ps_tRunJob_6 = runtime_tRunJob_6.exec((String[])paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));

            Thread normal_tRunJob_6 = consoleHelper_tRunJob_6.getNormalThread(ps_tRunJob_6);
            normal_tRunJob_6.start();

            Thread error_tRunJob_6 = consoleHelper_tRunJob_6.getErrorThread(ps_tRunJob_6, errorMsg_tRunJob_6);
            error_tRunJob_6.start();

            result_tRunJob_6 = ps_tRunJob_6.waitFor();
            normal_tRunJob_6.join(10000);
            error_tRunJob_6.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_6.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_6_CHILD_RETURN_CODE",result_tRunJob_6);
		if(result_tRunJob_6 != 0){
   			globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_6.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_6 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_6.toString());
			
  		}

		

 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRunJob_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		
class DealChildJobLibrary_tRunJob_7 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_7 dealChildJobLibrary_tRunJob_7 = new DealChildJobLibrary_tRunJob_7();

	class JVMArgumentHelper_tRunJob_7 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_7 jvm_argument_helper_tRunJob_7 = new JVMArgumentHelper_tRunJob_7();
	

 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_7 = System.getProperty("os.name");
			if (osName_tRunJob_7 != null && osName_tRunJob_7.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_7.add("java");
		      		
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, dealChildJobLibrary_tRunJob_7.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;g_hdo_safety_events_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "test.g_hdo_safety_events_0_1.G_HDO_safety_events");
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--father_node=tRunJob_7");
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_7.add("java");
		      		
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "-cp");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, dealChildJobLibrary_tRunJob_7.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/g_hdo_safety_events_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "test.g_hdo_safety_events_0_1.G_HDO_safety_events");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--father_node=tRunJob_7");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_7.addArgumentsTo(paraList_tRunJob_7, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_7.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_7 = null;

	
	
				class ConsoleHelper_tRunJob_7 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_7 consoleHelper_tRunJob_7 = new ConsoleHelper_tRunJob_7();

		Runtime runtime_tRunJob_7 = Runtime.getRuntime();
		Process ps_tRunJob_7 = null;

		//0 indicates normal termination
        int result_tRunJob_7;
        StringBuffer errorMsg_tRunJob_7 = new StringBuffer();
        try {
            ps_tRunJob_7 = runtime_tRunJob_7.exec((String[])paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));

            Thread normal_tRunJob_7 = consoleHelper_tRunJob_7.getNormalThread(ps_tRunJob_7);
            normal_tRunJob_7.start();

            Thread error_tRunJob_7 = consoleHelper_tRunJob_7.getErrorThread(ps_tRunJob_7, errorMsg_tRunJob_7);
            error_tRunJob_7.start();

            result_tRunJob_7 = ps_tRunJob_7.waitFor();
            normal_tRunJob_7.join(10000);
            error_tRunJob_7.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_7.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_7_CHILD_RETURN_CODE",result_tRunJob_7);
		if(result_tRunJob_7 != 0){
   			globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_7.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_7 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_7.toString());
			
  		}

		

 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRunJob_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		
class DealChildJobLibrary_tRunJob_8 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_8 dealChildJobLibrary_tRunJob_8 = new DealChildJobLibrary_tRunJob_8();

	class JVMArgumentHelper_tRunJob_8 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_8 jvm_argument_helper_tRunJob_8 = new JVMArgumentHelper_tRunJob_8();
	

 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_8 = System.getProperty("os.name");
			if (osName_tRunJob_8 != null && osName_tRunJob_8.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_8.add("java");
		      		
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, dealChildJobLibrary_tRunJob_8.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;h_hdo_veh_assets_driver_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "test.h_hdo_veh_assets_driver_0_1.H_HDO_veh_assets_driver");
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_node=tRunJob_8");
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_8.add("java");
		      		
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-cp");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, dealChildJobLibrary_tRunJob_8.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/h_hdo_veh_assets_driver_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "test.h_hdo_veh_assets_driver_0_1.H_HDO_veh_assets_driver");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_node=tRunJob_8");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_8.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_8 = null;

	
	
				class ConsoleHelper_tRunJob_8 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_8 consoleHelper_tRunJob_8 = new ConsoleHelper_tRunJob_8();

		Runtime runtime_tRunJob_8 = Runtime.getRuntime();
		Process ps_tRunJob_8 = null;

		//0 indicates normal termination
        int result_tRunJob_8;
        StringBuffer errorMsg_tRunJob_8 = new StringBuffer();
        try {
            ps_tRunJob_8 = runtime_tRunJob_8.exec((String[])paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));

            Thread normal_tRunJob_8 = consoleHelper_tRunJob_8.getNormalThread(ps_tRunJob_8);
            normal_tRunJob_8.start();

            Thread error_tRunJob_8 = consoleHelper_tRunJob_8.getErrorThread(ps_tRunJob_8, errorMsg_tRunJob_8);
            error_tRunJob_8.start();

            result_tRunJob_8 = ps_tRunJob_8.waitFor();
            normal_tRunJob_8.join(10000);
            error_tRunJob_8.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_8.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_8_CHILD_RETURN_CODE",result_tRunJob_8);
		if(result_tRunJob_8 != 0){
   			globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_8.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_8 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_8.toString());
			
  		}

		

 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tRunJob_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_9";

	
		int tos_count_tRunJob_9 = 0;
		
class DealChildJobLibrary_tRunJob_9 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_9 dealChildJobLibrary_tRunJob_9 = new DealChildJobLibrary_tRunJob_9();

	class JVMArgumentHelper_tRunJob_9 {
		
		
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			
			target_argument_list.add(argument_from_child);
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_9 jvm_argument_helper_tRunJob_9 = new JVMArgumentHelper_tRunJob_9();
	

 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
			String osName_tRunJob_9 = System.getProperty("os.name");
			if (osName_tRunJob_9 != null && osName_tRunJob_9.toLowerCase().startsWith("win")){
	      		
		      			paraList_tRunJob_9.add("java");
		      		
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-cp");
		      				
		        				jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, dealChildJobLibrary_tRunJob_9.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/activation-1.1.jar;../lib/advancedPersistentLookupLib-1.2.jar;../lib/btf-1.2.jar;../lib/commons-beanutils-1.8.3.jar;../lib/commons-collections-3.2.2.jar;../lib/commons-collections4-4.1.jar;../lib/commons-compress-1.18.jar;../lib/commons-lang-2.6.jar;../lib/commons-lang3-3.4.jar;../lib/commons-logging-1.1.1.jar;../lib/commons-math3-3.6.1.jar;../lib/crypto-utils.jar;../lib/dom4j-1.6.1.jar;../lib/ezmorph-1.0.6.jar;../lib/filecopy.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/guava-16.0.1.jar;../lib/jackson-annotations-2.8.0.jar;../lib/jackson-core-2.8.6.jar;../lib/jackson-coreutils-1.8.jar;../lib/jackson-databind-2.8.6.jar;../lib/jakarta-oro-2.0.8.jar;../lib/jaxen-1.1.1.jar;../lib/jboss-serialization.jar;../lib/jlo-talendcomp-json-12.1.jar;../lib/joda-time-2.9.7.jar;../lib/jopt-simple-5.0.3.jar;../lib/json-lib-2.4.3-talend.jar;../lib/json-path-2.3.0.jar;../lib/json-schema-core-1.2.8.jar;../lib/json-schema-validator-2.2.8.jar;../lib/jsr305-3.0.1.jar;../lib/libphonenumber-8.0.0.jar;../lib/log4j-1.2.17.jar;../lib/mailapi-1.4.3.jar;../lib/msg-simple-1.1.jar;../lib/poi-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar;../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar;../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar;../lib/rhino-1.7R4.jar;../lib/slf4j-api-1.7.25.jar;../lib/slf4j-simple-1.6.1.jar;../lib/talendcsv.jar;../lib/thashfile-3.1-20190910.jar;../lib/trove.jar;../lib/uri-template-0.9.jar;../lib/xmlbeans-3.1.0.jar;../lib/xom-1.2.7.jar;i_hdo_vehicles_0_1.jar;"));
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "test.i_hdo_vehicles_0_1.I_HDO_vehicles");
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_node=tRunJob_9");
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_9.add("java");
		      		
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-cp");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, dealChildJobLibrary_tRunJob_9.replaceJarPathsFromCrcMap(".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/advancedPersistentLookupLib-1.2.jar:$ROOT_PATH/../lib/btf-1.2.jar:$ROOT_PATH/../lib/commons-beanutils-1.8.3.jar:$ROOT_PATH/../lib/commons-collections-3.2.2.jar:$ROOT_PATH/../lib/commons-collections4-4.1.jar:$ROOT_PATH/../lib/commons-compress-1.18.jar:$ROOT_PATH/../lib/commons-lang-2.6.jar:$ROOT_PATH/../lib/commons-lang3-3.4.jar:$ROOT_PATH/../lib/commons-logging-1.1.1.jar:$ROOT_PATH/../lib/commons-math3-3.6.1.jar:$ROOT_PATH/../lib/crypto-utils.jar:$ROOT_PATH/../lib/dom4j-1.6.1.jar:$ROOT_PATH/../lib/ezmorph-1.0.6.jar:$ROOT_PATH/../lib/filecopy.jar:$ROOT_PATH/../lib/geronimo-stax-api_1.0_spec-1.0.1.jar:$ROOT_PATH/../lib/guava-16.0.1.jar:$ROOT_PATH/../lib/jackson-annotations-2.8.0.jar:$ROOT_PATH/../lib/jackson-core-2.8.6.jar:$ROOT_PATH/../lib/jackson-coreutils-1.8.jar:$ROOT_PATH/../lib/jackson-databind-2.8.6.jar:$ROOT_PATH/../lib/jakarta-oro-2.0.8.jar:$ROOT_PATH/../lib/jaxen-1.1.1.jar:$ROOT_PATH/../lib/jboss-serialization.jar:$ROOT_PATH/../lib/jlo-talendcomp-json-12.1.jar:$ROOT_PATH/../lib/joda-time-2.9.7.jar:$ROOT_PATH/../lib/jopt-simple-5.0.3.jar:$ROOT_PATH/../lib/json-lib-2.4.3-talend.jar:$ROOT_PATH/../lib/json-path-2.3.0.jar:$ROOT_PATH/../lib/json-schema-core-1.2.8.jar:$ROOT_PATH/../lib/json-schema-validator-2.2.8.jar:$ROOT_PATH/../lib/jsr305-3.0.1.jar:$ROOT_PATH/../lib/libphonenumber-8.0.0.jar:$ROOT_PATH/../lib/log4j-1.2.17.jar:$ROOT_PATH/../lib/mailapi-1.4.3.jar:$ROOT_PATH/../lib/msg-simple-1.1.jar:$ROOT_PATH/../lib/poi-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:$ROOT_PATH/../lib/rhino-1.7R4.jar:$ROOT_PATH/../lib/slf4j-api-1.7.25.jar:$ROOT_PATH/../lib/slf4j-simple-1.6.1.jar:$ROOT_PATH/../lib/talendcsv.jar:$ROOT_PATH/../lib/thashfile-3.1-20190910.jar:$ROOT_PATH/../lib/trove.jar:$ROOT_PATH/../lib/uri-template-0.9.jar:$ROOT_PATH/../lib/xmlbeans-3.1.0.jar:$ROOT_PATH/../lib/xom-1.2.7.jar:$ROOT_PATH/i_hdo_vehicles_0_1.jar:").replace("$ROOT_PATH",System.getProperty("user.dir")));
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "test.i_hdo_vehicles_0_1.I_HDO_vehicles");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_node=tRunJob_9");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "$@");
		      				
			}
			
			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_9.add("--monitoring="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_9 = null;

	
	
				class ConsoleHelper_tRunJob_9 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_9 consoleHelper_tRunJob_9 = new ConsoleHelper_tRunJob_9();

		Runtime runtime_tRunJob_9 = Runtime.getRuntime();
		Process ps_tRunJob_9 = null;

		//0 indicates normal termination
        int result_tRunJob_9;
        StringBuffer errorMsg_tRunJob_9 = new StringBuffer();
        try {
            ps_tRunJob_9 = runtime_tRunJob_9.exec((String[])paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));

            Thread normal_tRunJob_9 = consoleHelper_tRunJob_9.getNormalThread(ps_tRunJob_9);
            normal_tRunJob_9.start();

            Thread error_tRunJob_9 = consoleHelper_tRunJob_9.getErrorThread(ps_tRunJob_9, errorMsg_tRunJob_9);
            error_tRunJob_9.start();

            result_tRunJob_9 = ps_tRunJob_9.waitFor();
            normal_tRunJob_9.join(10000);
            error_tRunJob_9.join(10000);
        } catch (ThreadDeath tde) {
            ps_tRunJob_9.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_9_CHILD_RETURN_CODE",result_tRunJob_9);
		if(result_tRunJob_9 != 0){
   			globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_9.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_9 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_9.toString());
			
  		}

		

 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());




/**
 * [tRunJob_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Z_runner Z_runnerClass = new Z_runner();

        int exitCode = Z_runnerClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Z_runner.class.getClassLoader().getResourceAsStream("test/z_runner_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Z_runner.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRunJob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Z_runner");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     156335 characters generated by Talend Open Studio for Data Integration 
 *     on the August 8, 2024 1:11:10 PM IST
 ************************************************************************************************/